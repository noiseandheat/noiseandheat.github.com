<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Random | Noise & Heat]]></title>
  <link href="http://noiseandheat.github.com/blog/categories/random/atom.xml" rel="self"/>
  <link href="http://noiseandheat.github.com/"/>
  <updated>2012-11-16T00:08:28+00:00</updated>
  <id>http://noiseandheat.github.com/</id>
  <author>
    <name><![CDATA[David Wagner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shuffling arrays, the Objective-C edition]]></title>
    <link href="http://noiseandheat.github.com/blog/2011/08/shuffling-arrays-the-objective-c-edition/"/>
    <updated>2011-08-19T14:19:00+01:00</updated>
    <id>http://noiseandheat.github.com/blog/2011/08/shuffling-arrays-the-objective-c-edition</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/File:Blues_shuffle_in_E.png"><img class="right" src="/images/thumb-objective-c1.png" width="200" height="130"></a></p>

<p>Shuffling is just like buses. You sit about being deterministic for years, and
then all of a sudden, you need some random shuffling on two platforms at once.</p>

<!--more-->


<p>As a follow on from my previous post on <a href="/blog/2011/08/shuffling-arrays/">shuffling AS3 arrays</a>,
here's the same algorithm implemented as a category addition to
<a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/Reference/Reference.html">NSMutableArray</a>
for all your easy array shuffling needs.</p>

<p>To use it, download the method and header files, add them to your project and
them simply include the header file wherever you you want to shuffle anNSMutableArray:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (example_shuffle.m)</span> <a href='/downloads/code/example_shuffle.m'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp"> #import &quot;NSMutableArray+Shuffle.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMutableArray</span><span class="o">*</span><span class="p">)</span><span class="nf">myAwesomeFunction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithObjects:</span> <span class="s">@&quot;Fred&quot;</span><span class="p">,</span> <span class="s">@&quot;Bob&quot;</span><span class="p">,</span> <span class="s">@&quot;Alice&quot;</span><span class="p">];</span>
</span><span class='line'>	<span class="p">[</span><span class="n">array</span> <span class="n">shuffle</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Grab it while it's hot from github:</p>

<p><div><script src='https://gist.github.com/1156719.js?file='></script>
<noscript><pre><code>/**
 * NSMutableArray+Shuffle.h
 *
 * (c) Copyright 2011 David Wagner.
 *
 * Complain/commend: http://noiseandheat.com/
 *
 *
 * Licensed under the MIT license:
 * 
 *     http://www.opensource.org/licenses/mit-license.php
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#import &lt;Foundation/Foundation.h&gt;

@interface NSMutableArray (NSMutableArray_Shuffle)

/**
 * Shuffle the array elements in place.
 */
- (void)shuffle;

@end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shuffling arrays]]></title>
    <link href="http://noiseandheat.github.com/blog/2011/08/shuffling-arrays/"/>
    <updated>2011-08-11T17:11:00+01:00</updated>
    <id>http://noiseandheat.github.com/blog/2011/08/shuffling-arrays</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/File:Blues_shuffle_in_E.png"><img class="right" src="/images/thumb1.png" width="200" height="130"></a></p>

<p>For some reason, there doesn't seem to be any sane example of shuffling
arrays in ActionScript blogland. I discovered this when I was trying to send
a lazy link to someone of an implementation rather than write the code
myself. Oh, by sane I mean vaguely efficient, not overusing crazy Math.floor
or Array.slice functions.</p>

<!--more-->


<p>Shuffling data isn't a new problem, but people seem to always want to re-
invent things. Alas, it's often re-invented poorly. Here's a nice vintage
shuffling algorithm for you from 1964 (although the idea is based on a method
from 1938. History rocks.). Example usage is in the huge header comment:</p>

<p><div><script src='https://gist.github.com/1139943.js?file='></script>
<noscript><pre><code>package utils
{
    /**
     * Simple class to shuffle items in arrays using a modern Fisherâ€“Yates shuffle as described
     * by Richard Durstenfeld in ACM volume 7, issue 7: &quot;Algorithm 235: Random permutation&quot;.
     *
     *   Wikipedia: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
     *
     *
     * Author: David Wagner
     * Complain/compliment at: http://noiseandheat.com/
     *
     *
     * Sample usage:
     *
     *   import utils.Shuffle
     *   
     *   function myFunction():void
     *   {
     *       var data:Array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
     *   
     *       // Copy, leaving original untouched
     *       trace(&quot;-[Shuffling array copy]-----------------------------------------&quot;);
     *       trace( &quot;data before shuffle    : &quot; + data );
     *   
     *       var dataCopy = Shuffle.arrayCopy(data);
     *   
     *       trace( &quot;data after shuffle     : &quot; + data );
     *       trace( &quot;dataCopy after shuffle : &quot; + dataCopy );
     *   
     *       // In place
     *       trace(&quot;\n-[Shuffling array in place]-------------------------------------&quot;);
     *       trace( &quot;data before shuffle: &quot; + data );
     *   
     *       Shuffle.array(data);
     *   
     *       trace( &quot;data after shuffle : &quot; + data );
     *   }
     *
     * Sample output:
     *
     *   -[Shuffling array copy]-----------------------------------------
     *   data before shuffle    : 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle     : 0,1,2,3,4,5,6,7,8,9
     *   dataCopy after shuffle : 5,7,6,1,2,3,0,9,4,8
     *   
     *   -[Shuffling array in place]-------------------------------------
     *   data before shuffle: 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle : 7,9,4,8,6,5,1,3,0,2
     */
    public class Shuffle
    {
        /**
         * Shuffles an array in place.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function array(a:Array):void
        {
            // Using a variant type so any array member type can be swapped
            var temp:*;
            var j:int;
            for (var i:int = a.length - 1; i &gt; 0; i--)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        
        /**
         * Creates a shuffled copy of the specified array. The original array
         * remains in the order it was passed in.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function arrayCopy(source:Array):Array
        {
            var a:Array = new Array(source.length);
            a[0] = source[0];
            
            var j:int;
            for (var i:int = 1; i &lt; a.length; i++)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                a[i] = a[j];
                a[j] = source[i];
            }
            
            return a;
        }
    }
}
</code></pre></noscript></div>
</p>

<p>Feel free to extend the class to support typed Vectors. Sadly, you have to
implement each Vector type yourself as AS3 currently has no non-hacky method
of implementing template functions.</p>
]]></content>
  </entry>
  
</feed>
