<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Noise & Heat]]></title>
  <link href="http://noiseandheat.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://noiseandheat.github.com/"/>
  <updated>2012-11-16T00:08:28+00:00</updated>
  <id>http://noiseandheat.github.com/</id>
  <author>
    <name><![CDATA[David Wagner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy One Liners: 'git rm' all deleted files]]></title>
    <link href="http://noiseandheat.github.com/blog/2012/02/lazy-one-liners-%60git-rm%60-all-deleted-files/"/>
    <updated>2012-02-16T21:51:00+00:00</updated>
    <id>http://noiseandheat.github.com/blog/2012/02/lazy-one-liners-`git-rm`-all-deleted-files</id>
    <content type="html"><![CDATA[<p><strong>[UPDATE]</strong> <em>My <code>git</code> skills are weak. You can achieve this much more simply by typing: <code>git add -A</code>. Still, knowing about the <code>--porcelain</code> option is useful. Honest.</em></p>

<p>Deleted three hundred and seventy two files and forget to use <code>git rm</code>?
This one liner will do it for you, if you run it from your repository
root:</p>

<pre><code>git status --porcelain | awk '/^.D .*$/ {print $2}' | xargs git rm
</code></pre>

<!--more-->


<p>The <code>--porcelain</code> command is great for batch manipulations of your
staged and unstaged files. Just replace the <code>D</code> in <code>/^.D .*$/</code> with the
status letter for the sort of files you want to perform a batch
operation on, and then replace the <code>git rm</code> at the end of the command
with whatever you want to do to them. The filename will be passed at
the end of the <code>git</code> command.</p>

<p>When you change the letter, where you place the <strong>dots</strong> are important.
<code>.D</code> is used for unstaged deleted files, whereas <code>D</code> (no dot before)
indicates a staged deleted file. Those 2 columns can have many
character combinations, so you may have to play with the <code>awk</code> matching
string a little to filter what you want. To test the pattern safely, you
can use:</p>

<pre><code>git status --porcelain | awk '/^.D .*$/'
</code></pre>

<p>This will print any matching lines. If there's no output, the filter
doesn't match anything.</p>

<p>You can find more information about the status letters in the man
page for <a href="http://schacon.github.com/git/git-status.html">git-status</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty git]]></title>
    <link href="http://noiseandheat.github.com/blog/2011/02/pretty-git/"/>
    <updated>2011-02-04T16:10:00+00:00</updated>
    <id>http://noiseandheat.github.com/blog/2011/02/pretty-git</id>
    <content type="html"><![CDATA[<p>Being a Mac user, I'm unable to work with anything that doesn't have eye
candy, even my terminal. So, I knocked together a quick bash function to
prettify my terminal a little. It probably works in any bash or bash like
environment with git installed:</p>

<!--more-->


<p><img class="center" src="/images/5010093784_9f7e5fa9a1_o_d.png" width="482" height="167"></p>

<p>Of course, being a programmer, the script uses Programmer Colours. Feel free
to change them to something less eye-watering. If you want the same, add this
code to the end of your <code>~/.profile</code> or <code>~/.bash_profile</code>:</p>

<p><div><script src='https://gist.github.com/588800.js?file='></script>
<noscript><pre><code># Setup the prompt so that it shows the current branch when in a git directory.
source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh
function setup_prompts_for_git
{
  local      BLUE=&quot;\[\e[0;34m\]&quot;
  local       RED=&quot;\[\e[0;31m\]&quot;
  local    YELLOW=&quot;\[\e[0;33m\]&quot;
  local    PURPLE=&quot;\[\e[0;35m\]&quot;
  local CLR_RESET=&quot;\[\e[0m\]&quot;
  case $TERM in
    xterm*)
    TITLEBAR='\[\033]0;\u@\h:\w\007\]'
    ;;
    *)
    TITLEBAR=&quot;&quot;
    ;;
  esac

  PS1=&quot;${TITLEBAR}$BLUE[$RED\$(date +%H:%M)$BLUE][$RED\u@\h:$PURPLE\w$YELLOW\$(__git_ps1)$BLUE]$CLR_RESET\n\$ &quot;
  PS2='&gt; '
  PS4='+ '
}
setup_prompts_for_git
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The curious case of Eclipse, msysgit, and the obstinate dot files]]></title>
    <link href="http://noiseandheat.github.com/blog/2010/02/the-case-of-eclipse-msysgit-and-the-obstinate-dot-files/"/>
    <updated>2010-02-17T21:05:00+00:00</updated>
    <id>http://noiseandheat.github.com/blog/2010/02/the-case-of-eclipse-msysgit-and-the-obstinate-dot-files</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/01_dots.png" width="200" height="130"></p>

<p>Just a quick tip if you are having problems with Eclipse, FDT or other Eclipse based
tool and writing to dot files cloned from a git repository.</p>

<!--more-->


<p>If you are seeing messages about not have permission to write to <code>.project</code>,
<code>.as3_classpath</code> and so on, there's a reasonable chance that
<a href="http://code.google.com/p/msysgit/">msysgit</a> (or potentially
<a href="http://code.google.com/p/tortoisegit/">TortoiseGit</a>) automatically set the
dot files to hidden to mimic what you see on a unix based
machine. While this is nice, for some reason Eclipse, or possibly the
underlying Java file calls, can't write to hidden files on Windows so you get
access denied messages.</p>

<p>Fortunately, the solution is very simple. Open up a git Bash prompt, and enter
this:</p>

<pre><code>git config --global core.hidedotfiles false
</code></pre>

<p>And that's it. With <code>core.hidedotfiles</code> set to false,
<a href="http://code.google.com/p/msysgit/">msysgit</a> will no longer set the hidden
property on dot files, and Eclipse should be ready to rock.</p>

<p>Of course, this only affects newly fetched files, so if you want to clear the
hidden flag on existing files, jump into a cmd prompt (or this may work from
the git bash prompt) and type:</p>

<pre><code>cd folder_containing_the_repository
attrib /s /d -H *
</code></pre>
]]></content>
  </entry>
  
</feed>
