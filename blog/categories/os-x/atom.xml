<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS X | Noise & Heat]]></title>
  <link href="http://noiseandheat.github.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://noiseandheat.github.com/"/>
  <updated>2012-11-16T00:08:28+00:00</updated>
  <id>http://noiseandheat.github.com/</id>
  <author>
    <name><![CDATA[David Wagner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Throttling bandwidth on OS X]]></title>
    <link href="http://noiseandheat.github.com/blog/2012/02/throttling-bandwidth-on-os-x/"/>
    <updated>2012-02-03T22:35:00+00:00</updated>
    <id>http://noiseandheat.github.com/blog/2012/02/throttling-bandwidth-on-os-x</id>
    <content type="html"><![CDATA[<p>Recently I started pushing a repository to GitHub only to find out it
was a couple of GB in size. Due to my <a href="http://www.virginmedia.com/">ISPs</a> network
connection being made of soiled tissue paper, dead earwigs and lost
hope, it quickly saturated it. This interrupted watching
<a href="https://en.wikipedia.org/wiki/Breaking_Bad">Breaking Bad</a> on <a href="http://www.netflix.com/">Netflix</a>. Clearly something had to be done.</p>

<p>Enter <code>ipfw</code>.</p>

<!--more-->


<p><code>ipfw</code> is more generally thought of as a utility for managing firewall
rules on OS X, but it's also great for shaping traffic. Doing that is a
simple two step process: create an <code>ipfw pipe</code> for a data flow and then
configure how big that pipe is.</p>

<p>First, create a pipe which matches a flow of data. A pipe is a
combination of source address, destination address and optional matching
patterns. In my case I wanted to affect outgoing traffic to port 22
which is used by <code>ssh</code>, the program <code>git</code> generally talks to servers
with:</p>

<pre><code>$ sudo ipfw add pipe 1 ip from any to any out dst-port 22
</code></pre>

<p>I've been a bit lazy here by using <code>any</code> for the IP address fields. I
know that only my connection to github will be using <code>dst-port 22</code>. The
<code>from</code> IP address and <code>to</code> IP address may be written as a specifc IP, or
 a range of IPs using <a href="http://en.wikipedia.org/wiki/CIDR_notation">CIDR notation</a>, instead of the <code>any</code> wildcard.
 I've specifically set the rule to only match <code>out</code> going traffic. If
 you want to control the flow of data in both directions, you would
 generally create an <code>in</code> pipe and an <code>out</code> pipe separately</p>

<p>Note that I've named this pipe <strong>1</strong>. This number is used to uniquely
identify the pipe when carrying out other operations on it. If you
create more than one pipe, be sure to use unique numbers for each one.</p>

<p>Next, we have to configure the pipe to control the data flow:</p>

<pre><code>$ sudo ipfw pipe 1 config bw 75KBytes/s
</code></pre>

<p>The <code>bw</code> setting ensures that data passing through pipe 1 is
transferring at most 75 KBytes per second. You can set this to whatever
value is suitable for your connection.</p>

<p>If you want, you can check what connections are being affected:</p>

<pre><code>$ sudo ipfw pipe list
00001: 600.000 Kbit/s    0 ms   50 sl. 1 queues (1 buckets) droptail
    mask: 0x00 0x00000000/0x0000 -&gt; 0x00000000/0x0000
BKT Prot ___Source IP/port____ ____Dest. IP/port____ Tot_pkt/bytes Pkt/Byte Drp
  0 tcp    192.168.0.100/61291  207.97.227.239/22     685   991700 31 43792   0
</code></pre>

<p>Finally, don't forget to remove the pipe when you no longer need to
limit the data transfer rate:</p>

<pre><code>$ sudo ipfw pipe delete 1
</code></pre>

<p>There are many other options in <code>ipfw</code> for shaping traffic, including
commands for dropping a certain percentage of packets (great for testing
game networking code), and you can limit the bandwidth to very small
rates which is handy for seeing how slow connections experience websites
you create. Check out the
<a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man8/ipfw.8.html">man page</a>
for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Lion Terminal Colours]]></title>
    <link href="http://noiseandheat.github.com/blog/2011/12/os-x-lion-terminal-colours/"/>
    <updated>2011-12-03T21:25:00+00:00</updated>
    <id>http://noiseandheat.github.com/blog/2011/12/os-x-lion-terminal-colours</id>
    <content type="html"><![CDATA[<p><a href="http://www.vim.org/scripts/script.php?script_id=1349"><img class="right" src="/images/terminal_colours.png" width="200" height="130"></a></p>

<p>OS X is awesome for command line stuff, that's why <a href="http://xkcd.com/378/">real programmers</a>
love it. But some of the defaults Apple have used make me sad. Where are all
the colours? I <em>demand</em> my <code>ls</code> command be pretty and colourful! Why is Vim
so bland? While we're at it, can't ping lick my eyeballs more?</p>

<!--more-->


<p>Good news: yes, they can! I've stuck some tips together so I can remind
myself what to do when I inevitably reinstall my system for some pointless
reason, and for any new Mac users out there. It is near peak commercial
season after all, and I'm sure you've been good little boys and girls.</p>

<p>Let's start with the simple things.</p>

<h2>Making <code>ls</code> and <code>grep</code> Colourful</h2>

<p>Add these lines to your <code>.bash_profile</code> file which is in your home directory:</p>

<p>``` bash ~/.bash_profile</p>

<h1>Tell ls to be colourful</h1>

<p>export CLICOLOR=1</p>

<h1>Tell grep to highlight matches</h1>

<p>export GREP_OPTIONS='--color=auto'
```</p>

<p>Now when you use <code>ls</code>, folders and executables will appear in different
colours from normal files, and when you use grep to find text in files, the
matches will be highlighted.</p>

<p>You can change the colours used by <code>ls</code> via the <code>LSCOLORS</code> environment
variable. For example:</p>

<p>``` bash ~/.bash_profile</p>

<h1>Tell ls to be colourful</h1>

<p>export CLICOLOR=1
export LSCOLORS=Exfxcxdxbxegedabagacad</p>

<h1>Tell grep to highlight matches</h1>

<p>export GREP_OPTIONS='--color=auto'
```</p>

<p>Here's a handy website you can use to define your <code>LSCOLORS</code> scheme:
<a href="http://geoff.greer.fm/lscolors/">http://geoff.greer.fm/lscolors/</a>. It also
generates <code>LS_COLORS</code> definitions, useful if you're a Linux user. One thing
to note, though, is that the colours you will see in your terminal depend on
the particular theme you are using. Which brings me to my next tip.</p>

<h2>Using A Better Terminal Theme</h2>

<p>If you haven't changed the default terminal theme you must still be gazing
in to the snowy wasteland that is the default. This is insane. Programmers
are incompatible with white backgrounds. Er, except in blogs. <em>*cough*</em></p>

<p>Changing the terminal theme is marginally trickier than it should be. Here's
how you do it:</p>

<ol>
<li>Go to <code>Terminal</code> &rarr; <code>Preferencesâ€¦</code></li>
<li>Select the <code>Settings</code> group.</li>
<li>Pick something nice that doesn't sear your retinas.</li>
<li>At the bottom of the list box, click <code>Default</code> so that new terminals will
open with the selected colour scheme.</li>
</ol>


<p>Anything other than the default is a good start, but there are better themes out there than those bundled
with Lion. At the moment, my colour scheme of choice is <a href="http://ethanschoonover.com/solarized">Solarized</a>.
You can get a <a href="http://ethanschoonover.com/solarized">Solarized</a> scheme for
OS X's Terminal from here:</p>

<ul>
<li><a href="https://github.com/altercation/solarized/tree/master/osx-terminal.app-colors-solarized">https://github.com/altercation/solarized/tree/master/osx-terminal.app-colors-solarized</a></li>
</ul>


<p>If you are running <strong>Lion</strong>, <strong>ignore</strong> the README at the site. All you have to do to
install the theme is to open the <code>*.terminal</code> file. That should be enough to
make it appear in the themes list in the preferences dialog, where you can set
it as default.</p>

<p><a href="http://ethanschoonover.com/solarized">Solarized</a> is a great general purpose theme and there are settings for many
text environments - I use it in Xcode, <a href="http://www.sublimetext.com/2">Sublime Text 2</a>,
<a href="http://www.eclipsecolorthemes.org/?list=all&amp;q=solarized">Eclipse</a> and even
<a href="http://www.vim.org/">Vim</a>.</p>

<p>Which, niftily, brings me on to my next section.</p>

<h2>Making Vim Pretty</h2>

<p>Much as I've rallied against <a href="http://www.vim.org/">Vim</a> over the years, <a href="https://twitter.com/vizio360">Vizio360</a>
and <a href="https://twitter.com/Rev_Kachowski">Rev. Kachowski</a> have now drugged me
sufficiently to admit that it's pretty damn nice really. If you can handle
memorising &pi; to 300 digits, then you should be fine with <a href="http://www.vim.org/">Vim</a>
shortcuts. On the other hand if you're like me, you may want to use a
<a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">cheatsheet</a>.</p>

<p>However, we aren't here to learn, we're here to colourise. So, in order
to make Vim a bit more colourful on OS X, copy the example <code>vimrc</code> file
to your home directory:</p>

<pre><code>cp /usr/share/vim/vim73/vimrc_example.vim ~/.vimrc
</code></pre>

<p>Now you can enjoy pretty colours in Vim. If you want to add <a href="http://ethanschoonover.com/solarized">Solarized</a>
as your colour theme in Vim, I recommend installing the rather fantastic
<a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> in your .vimrc (<a href="https://github.com/tpope/vim-pathogen/blob/master/README.markdown">instructions</a>) and
then follow the instructions for "Option 2" in <a href="http://ethanschoonover.com/solarized/vim-colors-solarized">vim-colors-solarized README</a>.</p>

<h2>Making Nano Pretty</h2>

<p>If Nano is your Terminal text editor weapon of choice, then you can
enable syntax colouring by uncommenting the syntax files referenced in
<code>/etc/nanorc</code>. First, open it for editing:</p>

<pre><code>sudo nano /etc/nanorc
</code></pre>

<p>Move to the bottom of the file and then remove the <code>#</code> character
at the beginning of the lines which include other <code>*.nanorc</code> files. For
example, change:</p>

<p>``` bash /etc/nanorc</p>

<h2>Nanorc files</h2>

<h1>include "/usr/local/share/nano/nanorc.nanorc"</h1>

<p>```</p>

<p>To:</p>

<p>``` bash /etc/nanorc</p>

<h2>Nanorc files</h2>

<p>include "/usr/local/share/nano/nanorc.nanorc"
```</p>

<h2>Further Eyeball Licking via Homebrew</h2>

<p>For the next tip, I recommend using <a href="http://mxcl.github.com/homebrew/">Homebrew</a>
as the method of installation. If you aren't using <a href="http://mxcl.github.com/homebrew/">Homebrew</a>
yet, you probably should be. It's by far the <a href="http://mozidesign.com/2011/03/15/dinosaurs/">Most Awesome</a> package manager
available for OS X. So go install it:</p>

<ul>
<li><a href="https://github.com/mxcl/homebrew/wiki/installation">https://github.com/mxcl/homebrew/wiki/installation</a></li>
</ul>


<p>Installed? Good. Let us continue.</p>

<h2>Generic Colouriser</h2>

<p><a href="http://kassiopeia.juls.savba.sk/~garabik/software/grc/README.txt">Generic Colouriser</a>
is a great utility which can be used for colourising many different types of
output and log files. If you installed <a href="http://mxcl.github.com/homebrew/">Homebrew</a>
, installing grc is as simple as typing:</p>

<pre><code>brew install grc
</code></pre>

<p><strong>NOTE</strong>: If you followed the first tip and created a <code>.bash_profile</code>,
rather than appending the command to load grc to your <code>.bashrc</code>,
you want to append it to your <code>.bash_profile</code> file instead:</p>

<pre><code>echo 'source "`brew --prefix grc`/etc/grc.bashrc"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>If you are confused as to why, it's because the logic Bash uses for loading
these files is non-obvious. For a good description of the load sequence, read
<a href="http://www.thegeekstuff.com/2008/10/execution-sequence-for-bash_profile-bashrc-bash_login-profile-and-bash_logout/">Execution sequence for .bash_profile, .bashrc, .bash_login, .profile and .bash_logout</a>
by Ramesh Natarajan.</p>

<p>After you have added that line to your <code>.bash_profile</code>, either start a new
session, or reload the profile:</p>

<pre><code>source ~/.bash_profile
</code></pre>

<p>Now when you use certain commands such as traceroute, the output should be
colourised:</p>

<p><img class="center" src="/images/traceroute-grc.png" width="622" height="422"></p>

<p>Or you can call <code>tail</code> and <code>head</code> using grc to colourise log output:</p>

<p><img class="center" src="/images/head-grc.png" width="512" height="156"></p>

<h2>That's all Folks!</h2>

<p>Well, that's all I have for now. If anyone has any other good ones,
stick them in a comment below.</p>
]]></content>
  </entry>
  
</feed>
