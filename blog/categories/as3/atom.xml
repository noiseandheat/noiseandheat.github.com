<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: as3 | Noise & Heat]]></title>
  <link href="http://noiseandheat.github.com/blog/categories/as3/atom.xml" rel="self"/>
  <link href="http://noiseandheat.github.com/"/>
  <updated>2012-11-16T00:08:28+00:00</updated>
  <id>http://noiseandheat.github.com/</id>
  <author>
    <name><![CDATA[David Wagner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shuffling arrays]]></title>
    <link href="http://noiseandheat.github.com/blog/2011/08/shuffling-arrays/"/>
    <updated>2011-08-11T17:11:00+01:00</updated>
    <id>http://noiseandheat.github.com/blog/2011/08/shuffling-arrays</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/File:Blues_shuffle_in_E.png"><img class="right" src="/images/thumb1.png" width="200" height="130"></a></p>

<p>For some reason, there doesn't seem to be any sane example of shuffling
arrays in ActionScript blogland. I discovered this when I was trying to send
a lazy link to someone of an implementation rather than write the code
myself. Oh, by sane I mean vaguely efficient, not overusing crazy Math.floor
or Array.slice functions.</p>

<!--more-->


<p>Shuffling data isn't a new problem, but people seem to always want to re-
invent things. Alas, it's often re-invented poorly. Here's a nice vintage
shuffling algorithm for you from 1964 (although the idea is based on a method
from 1938. History rocks.). Example usage is in the huge header comment:</p>

<p><div><script src='https://gist.github.com/1139943.js?file='></script>
<noscript><pre><code>package utils
{
    /**
     * Simple class to shuffle items in arrays using a modern Fisherâ€“Yates shuffle as described
     * by Richard Durstenfeld in ACM volume 7, issue 7: &quot;Algorithm 235: Random permutation&quot;.
     *
     *   Wikipedia: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
     *
     *
     * Author: David Wagner
     * Complain/compliment at: http://noiseandheat.com/
     *
     *
     * Sample usage:
     *
     *   import utils.Shuffle
     *   
     *   function myFunction():void
     *   {
     *       var data:Array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
     *   
     *       // Copy, leaving original untouched
     *       trace(&quot;-[Shuffling array copy]-----------------------------------------&quot;);
     *       trace( &quot;data before shuffle    : &quot; + data );
     *   
     *       var dataCopy = Shuffle.arrayCopy(data);
     *   
     *       trace( &quot;data after shuffle     : &quot; + data );
     *       trace( &quot;dataCopy after shuffle : &quot; + dataCopy );
     *   
     *       // In place
     *       trace(&quot;\n-[Shuffling array in place]-------------------------------------&quot;);
     *       trace( &quot;data before shuffle: &quot; + data );
     *   
     *       Shuffle.array(data);
     *   
     *       trace( &quot;data after shuffle : &quot; + data );
     *   }
     *
     * Sample output:
     *
     *   -[Shuffling array copy]-----------------------------------------
     *   data before shuffle    : 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle     : 0,1,2,3,4,5,6,7,8,9
     *   dataCopy after shuffle : 5,7,6,1,2,3,0,9,4,8
     *   
     *   -[Shuffling array in place]-------------------------------------
     *   data before shuffle: 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle : 7,9,4,8,6,5,1,3,0,2
     */
    public class Shuffle
    {
        /**
         * Shuffles an array in place.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function array(a:Array):void
        {
            // Using a variant type so any array member type can be swapped
            var temp:*;
            var j:int;
            for (var i:int = a.length - 1; i &gt; 0; i--)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        
        /**
         * Creates a shuffled copy of the specified array. The original array
         * remains in the order it was passed in.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function arrayCopy(source:Array):Array
        {
            var a:Array = new Array(source.length);
            a[0] = source[0];
            
            var j:int;
            for (var i:int = 1; i &lt; a.length; i++)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                a[i] = a[j];
                a[j] = source[i];
            }
            
            return a;
        }
    }
}
</code></pre></noscript></div>
</p>

<p>Feel free to extend the class to support typed Vectors. Sadly, you have to
implement each Vector type yourself as AS3 currently has no non-hacky method
of implementing template functions.</p>
]]></content>
  </entry>
  
</feed>
