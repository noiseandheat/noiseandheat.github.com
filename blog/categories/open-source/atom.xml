<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | Noise & Heat]]></title>
  <link href="http://noiseandheat.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://noiseandheat.com/"/>
  <updated>2012-11-16T00:01:02+00:00</updated>
  <id>http://noiseandheat.com/</id>
  <author>
    <name><![CDATA[David Wagner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SparrowBones]]></title>
    <link href="http://noiseandheat.com/blog/2011/11/sparrowbones/"/>
    <updated>2011-11-22T23:39:00+00:00</updated>
    <id>http://noiseandheat.com/blog/2011/11/sparrowbones</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/SparrowBones_thumb.png" width="200" height="130"></p>

<p><strong>UPDATE</strong>: <a href="http://gamua.com/blog/2012/03/sparrow-1-3/">Sparrow 1.3</a> has now
been released and it includes an updated and significantly enhanced
AppScaffold project which makes most of the reasons to use SparrowBones
redundant. I recommend you use the official AppScaffold project as a starting
point now, rather than SparrowBones.</p>

<hr />

<p><a href="http://www.sparrow-framework.org/">Sparrow-Framework</a> is pretty awesome for
quickly chucking together iOS games. But wouldn't it be nicer if there was a
handy Xcode 4 template to start from?</p>

<!--more-->


<p>Your wish is my command! Presenting <strong>SparrowBones</strong>, a beautiful handcrafted
Xcode 4 template:</p>

<ul>
<li><a href="https://github.com/mnem/SparrowBones">https://github.com/mnem/SparrowBones</a></li>
</ul>


<p>It's fairly simple and slightly hacky. Unlike the AppScaffold, which comes
with Sparrow-Framework, it supports automatic rotation (because I always hold
my iPhone the wrong way) and unit testing (because I'm crazy like that). The
<a href="https://github.com/mnem/SparrowBones/blob/master/README.md">README.md</a> file
in the project should guide you through the installation.</p>

<p>If you use it, you'll notice 2 template projects in the SparrowBones section -
<em>"Game with Sparrow source copied"</em> and <em>"Game with Sparrow source linked"</em>.
The only difference between them is that with the copied source the Sparrow
Framework source code is copied into your new project. If you choose linked,
the Sparrow Framework source is connected to your new project through your
<code>SPARROW_SRC</code> variable in Xcode.</p>

<p>Why 2 templates? Mainly because the Xcode template format is undocumented and
I haven't quite worked out how to include a linked project easily in a
template. This means that you have to tweak a few things when you use a linked
project unfortunately. But never fear! This post has a handy guide to getting
it working a little further down.</p>

<p>Although it's recommended that you use the template with the linked Sparrow
source (because it's a lot easier to update Sparrow-Framework that way), you
may actually want to have a project with the Sparrow source copied. For
example, if you are doing some hardcore hacking of the source this is a good
option, or if you want to create a self contained project you can archive and
mail to people it's great for that too.</p>

<p>On with the guide!</p>

<h2>Setting up linked source SparrowBones projects</h2>

<p>Choose the right one:</p>

<p><img class="center" src="/images/00_sb_choose.png" width="730" height="493"></p>

<p>Fill in some blanks and choose which device family to aim for. <strong>IMPORTANT</strong>:
Uncheck "Use Automatic Reference Counting" (Sparrow doesn't work with that
yet). I also uncheck "Use Storyboard" because I haven't learned how to use
those:</p>

<p><img class="center" src="/images/01_sb_name_stuff.png" width="730" height="493"></p>

<p>Next, we have to fix that red Sparrow.xcodeproj reference. Select it and press
Alt-Cmd-1 to show the inspector:</p>

<p><img class="center" src="/images/02_sb_select_sparrow.png" width="859" height="321"></p>

<p>Then change it to be relative to your linked Sparrow Framework source.
<strong>NOTE</strong>: the link name may be different for you – it depends on what you
entered when setting it up (if you haven't set a link to the source up, <a href="http://www.sparrow-framework.org/help/gettingstarted/">do that now</a> before
continuing):</p>

<p><img class="center" src="/images/03_sb_adjust_link.png" width="260" height="228"></p>

<p>If you look back at the Project navigator you should see Sparrow.xcodeproj as
an <strong>expandable</strong> project:</p>

<p><img class="center" src="/images/04_sb_linked_properly.png" width="260" height="64"></p>

<p>This is <strong>important</strong>. If it doesn't have the arrow, you will have to <strong>quit</strong>
Xcode and then re-launch it and open the project. Sometimes Xcode is a bit
slow about picking up path changes.</p>

<p>If that all important triangle is next to Sparrow.xcodeproj, you have one more
thing to do. Xcode needs to know that it has to build Sparrow.xcodeproj as a
dependency of your game target. Here's how: <strong>1)</strong> Select Sparrow.xcodeproj in
the project navigator, <strong>2)</strong> select your game target in the editor window,
<strong>3)</strong> go to the Build Phases section, <strong>4)</strong> expand the target dependencies
and click the plus.</p>

<p><img class="center" src="/images/05_sb_add_dep.png" width="817" height="275"></p>

<p>In the window that appears, select the Sparrow target:</p>

<p><img class="center" src="/images/06_sb_choos_dep.png" width="402" height="462"></p>

<p>Select Add. If my instructions worked, you should now have Sparrow as a
dependency:</p>

<p><img class="center" src="/images/07_sb_dep_added.png" width="591" height="159"></p>

<p>That's it! Simple once you know how. You should now be able to run the project
in one of the simulator targets and you will some see Exciting Boxes on the
screen. Awesome. Well done you!</p>

<h2>A Note on Unit Tests</h2>

<p>If you want to write unit tests, and I know you do, you will have to add all
the Frameworks in the frameworks folder to your <code>&lt;AppName&gt;Tests</code> target,
otherwise you will get lots of Mach-O linker errors:</p>

<p><img class="center" src="/images/08_sb_unit_test.png" width="874" height="528"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shuffling arrays, the Objective-C edition]]></title>
    <link href="http://noiseandheat.com/blog/2011/08/shuffling-arrays-the-objective-c-edition/"/>
    <updated>2011-08-19T14:19:00+01:00</updated>
    <id>http://noiseandheat.com/blog/2011/08/shuffling-arrays-the-objective-c-edition</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/File:Blues_shuffle_in_E.png"><img class="right" src="/images/thumb-objective-c1.png" width="200" height="130"></a></p>

<p>Shuffling is just like buses. You sit about being deterministic for years, and
then all of a sudden, you need some random shuffling on two platforms at once.</p>

<!--more-->


<p>As a follow on from my previous post on <a href="/blog/2011/08/shuffling-arrays/">shuffling AS3 arrays</a>,
here's the same algorithm implemented as a category addition to
<a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/Reference/Reference.html">NSMutableArray</a>
for all your easy array shuffling needs.</p>

<p>To use it, download the method and header files, add them to your project and
them simply include the header file wherever you you want to shuffle anNSMutableArray:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (example_shuffle.m)</span> <a href='/downloads/code/example_shuffle.m'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp"> #import &quot;NSMutableArray+Shuffle.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMutableArray</span><span class="o">*</span><span class="p">)</span><span class="nf">myAwesomeFunction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithObjects:</span> <span class="s">@&quot;Fred&quot;</span><span class="p">,</span> <span class="s">@&quot;Bob&quot;</span><span class="p">,</span> <span class="s">@&quot;Alice&quot;</span><span class="p">];</span>
</span><span class='line'>	<span class="p">[</span><span class="n">array</span> <span class="n">shuffle</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Grab it while it's hot from github:</p>

<p><div><script src='https://gist.github.com/1156719.js?file='></script>
<noscript><pre><code>/**
 * NSMutableArray+Shuffle.h
 *
 * (c) Copyright 2011 David Wagner.
 *
 * Complain/commend: http://noiseandheat.com/
 *
 *
 * Licensed under the MIT license:
 * 
 *     http://www.opensource.org/licenses/mit-license.php
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#import &lt;Foundation/Foundation.h&gt;

@interface NSMutableArray (NSMutableArray_Shuffle)

/**
 * Shuffle the array elements in place.
 */
- (void)shuffle;

@end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shuffling arrays]]></title>
    <link href="http://noiseandheat.com/blog/2011/08/shuffling-arrays/"/>
    <updated>2011-08-11T17:11:00+01:00</updated>
    <id>http://noiseandheat.com/blog/2011/08/shuffling-arrays</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/File:Blues_shuffle_in_E.png"><img class="right" src="/images/thumb1.png" width="200" height="130"></a></p>

<p>For some reason, there doesn't seem to be any sane example of shuffling
arrays in ActionScript blogland. I discovered this when I was trying to send
a lazy link to someone of an implementation rather than write the code
myself. Oh, by sane I mean vaguely efficient, not overusing crazy Math.floor
or Array.slice functions.</p>

<!--more-->


<p>Shuffling data isn't a new problem, but people seem to always want to re-
invent things. Alas, it's often re-invented poorly. Here's a nice vintage
shuffling algorithm for you from 1964 (although the idea is based on a method
from 1938. History rocks.). Example usage is in the huge header comment:</p>

<p><div><script src='https://gist.github.com/1139943.js?file='></script>
<noscript><pre><code>package utils
{
    /**
     * Simple class to shuffle items in arrays using a modern Fisher–Yates shuffle as described
     * by Richard Durstenfeld in ACM volume 7, issue 7: &quot;Algorithm 235: Random permutation&quot;.
     *
     *   Wikipedia: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
     *
     *
     * Author: David Wagner
     * Complain/compliment at: http://noiseandheat.com/
     *
     *
     * Sample usage:
     *
     *   import utils.Shuffle
     *   
     *   function myFunction():void
     *   {
     *       var data:Array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
     *   
     *       // Copy, leaving original untouched
     *       trace(&quot;-[Shuffling array copy]-----------------------------------------&quot;);
     *       trace( &quot;data before shuffle    : &quot; + data );
     *   
     *       var dataCopy = Shuffle.arrayCopy(data);
     *   
     *       trace( &quot;data after shuffle     : &quot; + data );
     *       trace( &quot;dataCopy after shuffle : &quot; + dataCopy );
     *   
     *       // In place
     *       trace(&quot;\n-[Shuffling array in place]-------------------------------------&quot;);
     *       trace( &quot;data before shuffle: &quot; + data );
     *   
     *       Shuffle.array(data);
     *   
     *       trace( &quot;data after shuffle : &quot; + data );
     *   }
     *
     * Sample output:
     *
     *   -[Shuffling array copy]-----------------------------------------
     *   data before shuffle    : 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle     : 0,1,2,3,4,5,6,7,8,9
     *   dataCopy after shuffle : 5,7,6,1,2,3,0,9,4,8
     *   
     *   -[Shuffling array in place]-------------------------------------
     *   data before shuffle: 0,1,2,3,4,5,6,7,8,9
     *   data after shuffle : 7,9,4,8,6,5,1,3,0,2
     */
    public class Shuffle
    {
        /**
         * Shuffles an array in place.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function array(a:Array):void
        {
            // Using a variant type so any array member type can be swapped
            var temp:*;
            var j:int;
            for (var i:int = a.length - 1; i &gt; 0; i--)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        
        /**
         * Creates a shuffled copy of the specified array. The original array
         * remains in the order it was passed in.
         *
         * This assumes the array is 0 indexed (i.e. indexed start from 0) and
         * that it is a dense array, that is the values run from 0 to array.length
         * without any gaps.
         */
        static public function arrayCopy(source:Array):Array
        {
            var a:Array = new Array(source.length);
            a[0] = source[0];
            
            var j:int;
            for (var i:int = 1; i &lt; a.length; i++)
            {
                // Generate an integer, j, such that 0 &lt;= j &lt;= i
                //
                // Adding 1 to i because Math.random() returns values in the range: 0 &lt;= n &lt; 1
                j = Math.random() * (i + 1);
                
                // Swap items
                a[i] = a[j];
                a[j] = source[i];
            }
            
            return a;
        }
    }
}
</code></pre></noscript></div>
</p>

<p>Feel free to extend the class to support typed Vectors. Sadly, you have to
implement each Vector type yourself as AS3 currently has no non-hacky method
of implementing template functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlexUnit Visual Listener]]></title>
    <link href="http://noiseandheat.com/blog/2011/07/flexunit-visual-listener/"/>
    <updated>2011-07-18T16:18:00+01:00</updated>
    <id>http://noiseandheat.com/blog/2011/07/flexunit-visual-listener</id>
    <content type="html"><![CDATA[<p>Let's face it, we all use Flash and AS3 because we like pretty eye candy.
Otherwise we'd just use a real language.</p>

<!--more-->


<p>In light of that, I've never been particularly happy with the standard
AS3 FlexUnit listener you get when you aren't running inside FlashBuilder. Trace
statements are <em>so</em> last century. Also, they give me flashbacks to embedded C
programming, and I have to go and brick a firmware. I'm running out of phones.</p>

<p>So, in place of trace, I present: Green Dots (a.k.a. <a href="https://github.com/mnem/flexunit_visual_listener">FlexUnit Visual Listener</a>):</p>

<p><a href="https://github.com/mnem/flexunit_visual_listener"><img class="center" src="/images/2_0_portfolio1.png" width="630" height="420"></a></p>

<p>They're totally contemporary, work with any dress and are a stylish addition
to every modern CI system. They even give you some useful error information
when you roll the mouse over the test result dot (which you can copy to the
clipboard by clicking. Awesome!).</p>

<p>Bonus! It's simple to use too. Here's an example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (example_flexunitvisuallistener.as)</span> <a href='/downloads/code/example_flexunitvisuallistener.as'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="kd">package</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">noiseandheat</span><span class="p">.</span><span class="nx">flexunit</span><span class="p">.</span><span class="nx">visuallistener</span><span class="p">.</span><span class="nx">VisualListener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">org</span><span class="p">.</span><span class="nx">flexunit</span><span class="p">.</span><span class="nx">internals</span><span class="p">.</span><span class="nx">TraceListener</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">org</span><span class="p">.</span><span class="nx">flexunit</span><span class="p">.</span><span class="nx">runner</span><span class="p">.</span><span class="nx">FlexUnitCore</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">org</span><span class="p">.</span><span class="nx">fluint</span><span class="p">.</span><span class="nx">uiImpersonation</span><span class="p">.</span><span class="nx">VisualTestEnvironmentBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">display</span><span class="p">.</span><span class="nb">Sprite</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">display</span><span class="p">.</span><span class="nb">StageAlign</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">display</span><span class="p">.</span><span class="nb">StageScaleMode</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nb">Event</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nx">SWF</span><span class="p">(</span><span class="nx">backgroundColor</span><span class="o">=</span><span class="s2">&quot;#000000&quot;</span><span class="o">,</span> <span class="nx">frameRate</span><span class="o">=</span><span class="s2">&quot;120&quot;</span><span class="o">,</span> <span class="nx">width</span><span class="o">=</span><span class="s2">&quot;800&quot;</span><span class="o">,</span> <span class="nx">height</span><span class="o">=</span><span class="s2">&quot;600&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nx">TestRunner</span> <span class="kd">extends</span> <span class="nb">Sprite</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="k">var</span> <span class="nx">core</span><span class="o">:</span><span class="nx">FlexUnitCore</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="k">var</span> <span class="nx">listener</span><span class="o">:</span><span class="nx">VisualListener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">function</span> <span class="nx">TestRunner</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">core</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FlexUnitCore</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">VisualTestEnvironmentBuilder</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisualListener</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">addChild</span><span class="p">(</span><span class="nx">listener</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">core</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">listener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Add a trace listener too if you want some trace output core.addListener(new</span>
</span><span class='line'>            <span class="nx">TraceListener</span><span class="p">(</span><span class="mi">800</span><span class="o">,</span> <span class="mi">600</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">core</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">NoiseAndHeatSuite</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">addEventListener</span><span class="p">(</span><span class="nb">Event</span><span class="p">.</span><span class="nx">ADDED_TO_STAGE</span><span class="o">,</span> <span class="nx">addedToStage</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">addedToStage</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nb">Event</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">removeEventListener</span><span class="p">(</span><span class="nb">Event</span><span class="p">.</span><span class="nx">ADDED_TO_STAGE</span><span class="o">,</span> <span class="nx">addedToStage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">stage</span><span class="p">.</span><span class="nx">align</span> <span class="o">=</span> <span class="nb">StageAlign</span><span class="p">.</span><span class="nx">TOP_LEFT</span><span class="o">;</span>
</span><span class='line'>            <span class="nx">stage</span><span class="p">.</span><span class="nx">scaleMode</span> <span class="o">=</span> <span class="nb">StageScaleMode</span><span class="p">.</span><span class="nx">NO_SCALE</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's similar to the normal FlexUnit runner example, but with the addition of
the VisualListener and stage tweaks.</p>

<p>Grab it while it's hot from: <a href="https://github.com/mnem/flexunit_visual_listener">https://github.com/mnem/flexunit_visual_listener</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sparrow Framework AppScaffold not archiving correctly - fix]]></title>
    <link href="http://noiseandheat.com/blog/2011/07/sparrow-framework-appscaffold-not-archiving-correctly-fix/"/>
    <updated>2011-07-09T01:49:00+01:00</updated>
    <id>http://noiseandheat.com/blog/2011/07/sparrow-framework-appscaffold-not-archiving-correctly-fix</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/0_article_thumb21.png" width="200" height="130"></p>

<p><strong>UPDATED</strong>: <em>The pull request was merged, so this should be all fixed.</em></p>

<p>If you've tried to create an app using the latest <a href="http://www.sparrow-framework.org/">Sparrow Framework</a>
and XCode 4, then tried to Archive it (say for distributing via the excellent
<a href="https://testflightapp.com/">TestFlightApp</a> service), you may have run into an
error similar to the following:</p>

<p><blockquote><p>AppScaffold Cannot be Validated “AppScaffold” does not contain a single–bundle application or contains multiple products. Please select another archive, or adjust your scheme to create a single–bundle application.</p></blockquote></p>

<!--more-->


<p>Don't panic! This solution is simple:</p>

<ol>
<li>In XCode, select the linked Sparrow project.</li>
<li>In the editor, select the Sparrow target.</li>
<li>Now select the "Build Phases" tab.</li>
<li><p>Expand the "Copy Headers" section. It should look a little like this:</p>

<p> <img class="center" src="/images/post_screenshot_011.png" width="800" height="200"></p></li>
<li><p>Now select all the header files in the "Public" section and drag them to "Project". You should end up with the section looking like this:</p>

<p> <img class="center" src="/images/post_screenshot_11.png" width="444" height="351"></p></li>
</ol>


<p>That should be all you need to do. Now if you Archive the app, you should be
able to successfully Share/Validate it from the Archive Organizer, and your
icons and version numbers should look as delicious as you expected.</p>

<p>I've submitted a <a href="https://github.com/PrimaryFeather/Sparrow-Framework/pull/1032">pull request</a>,
so assuming I haven't done anything too insane in it,
these changes should make it into the main project at some point.</p>
]]></content>
  </entry>
  
</feed>
